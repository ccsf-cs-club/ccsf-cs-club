---
import Layout from "../layouts/Layout.astro";
import StarRating from "../components/StarRating.astro";
---

<Layout title="STAR Voting - Cast Your Vote - CCSF CS Club" description="Participate in STAR voting at CCSF CS Club. Rate candidates from 0-5 stars and help determine the winner through Score Then Automatic Runoff voting.">
  <main class="m-auto w-[800px] p-4 text-xl">
    <h1 class="title-gradient my-6 text-center text-6xl font-bold">
      STAR Voting
    </h1>
    
    <div class="mb-8 text-center">
      <p class="text-lg text-gray-600 dark:text-gray-400 mb-2">
        Rate each candidate from 0 to 5 stars based on your preference
      </p>
      <p class="text-sm text-gray-500 dark:text-gray-500">
        Your vote helps determine the winner through Score Then Automatic Runoff
      </p>
    </div>

    <!-- Loading State -->
    <div id="loading" class="text-center py-8">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
      <p class="mt-2 text-gray-600">Loading candidates...</p>
    </div>

    <!-- Error State -->
    <div id="error" class="hidden text-center py-8">
      <p class="text-red-600 mb-4">Failed to load candidates.</p>
      <button id="retry-btn" class="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700">
        Retry
      </button>
    </div>

    <!-- Voting Form -->
    <div id="voting-form" class="hidden">
      <form id="vote-form" class="space-y-6">
        <div id="candidates-container" class="space-y-6">
          <!-- Candidate cards will be inserted here -->
        </div>

        <!-- Vote Progress -->
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
          <div class="mb-4">
            <div class="flex justify-between items-center">
              <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Voting Progress</span>
              <span id="progress-text" class="text-sm text-gray-500">0 candidates rated</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5 mt-2">
              <div id="progress-bar" class="bg-indigo-600 h-2.5 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
          </div>
        </div>

        <!-- Vote Submission -->
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
          <div class="text-center space-y-4">
            <button type="submit" id="submit-vote-btn" class="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-3 px-8 text-lg font-medium text-white shadow-sm hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
              Submit Vote
            </button>
            <div class="space-x-4">
              <button type="button" id="clear-votes-btn" class="inline-flex justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-200 dark:hover:bg-gray-700">
                Clear All Votes
              </button>
              <a href="/results" class="inline-flex justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-200 dark:hover:bg-gray-700">
                View Results
              </a>
            </div>
          </div>
        </div>
      </form>
    </div>

    <!-- Success State -->
    <div id="success" class="hidden text-center py-8">
      <div class="bg-gradient-to-r from-green-100 to-green-200 dark:from-green-800 dark:to-green-900 rounded-lg p-6 shadow-lg">
        <h2 class="text-3xl font-bold text-green-800 dark:text-green-200 mb-2">âœ… Vote Submitted!</h2>
        <p class="text-green-700 dark:text-green-300 mb-4">Thank you for participating in the STAR voting process.</p>
        <div class="space-x-4">
          <a href="/results" class="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-3 px-6 text-lg font-medium text-white shadow-sm hover:bg-indigo-700">
            View Results
          </a>
          <button id="vote-again-btn" class="inline-flex justify-center rounded-md border border-gray-300 bg-white py-3 px-6 text-lg font-medium text-gray-700 shadow-sm hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-200 dark:hover:bg-gray-700">
            Vote Again
          </button>
        </div>
      </div>
    </div>

    <!-- Navigation -->
    <div class="mt-8 text-center">
      <a href="/" class="inline-flex justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-200 dark:hover:bg-gray-700">
        Back to Home
      </a>
    </div>
  </main>

  <script>
    interface Candidate {
      id: string;
      name: string;
      description?: string;
    }

    interface VoteData {
      candidate_id: string;
      score: number;
    }

    let candidates: Candidate[] = [];
    let votes: Map<string, number> = new Map();
    let voterId: string = '';

    // Generate a unique voter ID for this session
    function generateVoterId(): string {
      return 'voter_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now().toString(36);
    }

    async function loadCandidates(): Promise<void> {
      const loading = document.getElementById('loading');
      const error = document.getElementById('error');
      const votingForm = document.getElementById('voting-form');

      try {
        const response = await fetch('/api/candidates');
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        candidates = data.candidates || data;
        
        // Hide loading, show form
        loading?.classList.add('hidden');
        error?.classList.add('hidden');
        votingForm?.classList.remove('hidden');

        // Populate the candidates
        renderCandidates();

      } catch (err) {
        console.error('Failed to load candidates:', err);
        
        // Show error state
        loading?.classList.add('hidden');
        error?.classList.remove('hidden');
      }
    }

    function renderCandidates(): void {
      const container = document.getElementById('candidates-container');
      if (!container) return;

      // Create candidate cards using StarRating component
      const candidateCards = candidates.map(candidate => {
        return `
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg border">
            <div class="mb-4">
              <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100">${candidate.name}</h3>
              ${candidate.description ? `<p class="text-gray-600 dark:text-gray-400 mt-2">${candidate.description}</p>` : ''}
            </div>
            
            <div class="space-y-3">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Your Rating (0-5 stars):
              </label>
              
              <div id="star-rating-${candidate.id}"></div>
            </div>
          </div>
        `;
      }).join('');

      container.innerHTML = candidateCards;

      // Initialize star rating components for each candidate
      candidates.forEach(candidate => {
        createStarRatingComponent(candidate.id);
      });

      updateProgress();
    }

    function createStarRatingComponent(candidateId: string): void {
      const container = document.getElementById(`star-rating-${candidateId}`);
      if (!container) return;

      // Create star rating HTML similar to the StarRating component
      const starRatingHTML = `
        <div class="flex items-center gap-1" data-candidate-id="${candidateId}" data-value="0">
          ${Array.from({ length: 5 }, (_, i) => {
            const starValue = i + 1;
            return `
              <button
                type="button"
                class="star-button transition-all duration-200 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:ring-opacity-50 rounded cursor-pointer text-gray-300 hover:text-yellow-200"
                data-candidate-id="${candidateId}"
                data-star-value="${starValue}"
                title="${starValue} star${starValue !== 1 ? 's' : ''}"
                aria-label="${starValue} star rating"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                </svg>
              </button>
            `;
          }).join('')}
          <span class="ml-2 text-sm text-gray-600 dark:text-gray-400" data-rating-text>
            Not rated
          </span>
        </div>
      `;

      container.innerHTML = starRatingHTML;

      // Add event listeners for this star rating
      attachStarRatingListeners(candidateId);
    }

    function attachStarRatingListeners(candidateId: string): void {
      const buttons = document.querySelectorAll(`button[data-candidate-id="${candidateId}"]`);
      const container = document.querySelector(`[data-candidate-id="${candidateId}"]`);
      
      buttons.forEach(button => {
        const btn = button as HTMLButtonElement;
        const starValue = parseInt(btn.dataset.starValue!);
        
        // Click handler
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          updateVote(candidateId, starValue);
        });

        // Hover handlers
        btn.addEventListener('mouseenter', () => {
          previewRating(candidateId, starValue);
        });
      });

      // Reset on container mouse leave
      container?.addEventListener('mouseleave', () => {
        const currentRating = votes.get(candidateId) || 0;
        updateStarDisplay(candidateId, currentRating);
      });
    }

    function updateVote(candidateId: string, score: number): void {
      votes.set(candidateId, score);
      updateStarDisplay(candidateId, score);
      updateProgress();
      updateSubmitButton();
    }

    function updateStarDisplay(candidateId: string, rating: number): void {
      const buttons = document.querySelectorAll(`button[data-candidate-id="${candidateId}"]`);
      const ratingText = document.querySelector(`[data-candidate-id="${candidateId}"] [data-rating-text]`);
      
      buttons.forEach((button, index) => {
        const btn = button as HTMLButtonElement;
        const starValue = index + 1;
        const isActive = starValue <= rating;
        
        if (isActive) {
          btn.classList.remove('text-gray-300');
          btn.classList.add('text-yellow-400');
        } else {
          btn.classList.remove('text-yellow-400');
          btn.classList.add('text-gray-300');
        }
      });

      if (ratingText) {
        ratingText.textContent = rating > 0 ? `${rating}/5` : 'Not rated';
      }
    }

    function previewRating(candidateId: string, rating: number): void {
      const buttons = document.querySelectorAll(`button[data-candidate-id="${candidateId}"]`);
      
      buttons.forEach((button, index) => {
        const btn = button as HTMLButtonElement;
        const starValue = index + 1;
        const isActive = starValue <= rating;
        
        if (isActive) {
          btn.classList.remove('text-gray-300');
          btn.classList.add('text-yellow-300');
        } else {
          btn.classList.remove('text-yellow-300');
          btn.classList.add('text-gray-300');
        }
      });
    }

    function updateProgress(): void {
      const totalCandidates = candidates.length;
      const ratedCandidates = Array.from(votes.values()).filter(score => score > 0).length;
      const percentage = totalCandidates > 0 ? (ratedCandidates / totalCandidates) * 100 : 0;

      const progressBar = document.getElementById('progress-bar');
      const progressText = document.getElementById('progress-text');

      if (progressBar) {
        progressBar.style.width = `${percentage}%`;
      }

      if (progressText) {
        progressText.textContent = `${ratedCandidates} of ${totalCandidates} candidates rated`;
      }
    }

    function updateSubmitButton(): void {
      const submitBtn = document.getElementById('submit-vote-btn') as HTMLButtonElement;
      if (submitBtn) {
        const hasVotes = Array.from(votes.values()).some(score => score > 0);
        submitBtn.disabled = !hasVotes;
      }
    }

    function clearAllVotes(): void {
      votes.clear();
      candidates.forEach(candidate => {
        updateStarDisplay(candidate.id, 0);
      });
      updateProgress();
      updateSubmitButton();
    }

    async function submitVote(): Promise<void> {
      const submitBtn = document.getElementById('submit-vote-btn') as HTMLButtonElement;
      const originalText = submitBtn.textContent;
      
      // Show loading state
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<div class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>Submitting...';

      try {
        // Prepare vote data in the format expected by the API
        const voteData: VoteData[] = Array.from(votes.entries())
          .filter(([_, score]) => score > 0) // Only submit votes with scores > 0
          .map(([candidateId, score]) => ({
            candidate_id: candidateId,
            score
          }));

        if (voteData.length === 0) {
          throw new Error('No votes to submit');
        }

        const response = await fetch('/api/vote', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            voter_id: voterId,
            votes: voteData
          }),
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        console.log('Vote submitted successfully:', result);

        // Show success state
        document.getElementById('voting-form')?.classList.add('hidden');
        document.getElementById('success')?.classList.remove('hidden');

      } catch (err) {
        console.error('Failed to submit vote:', err);
        
        // Show error message
        alert('Failed to submit vote. Please try again.');
        
        // Restore button state
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', () => {
      // Generate voter ID
      voterId = generateVoterId();
      console.log('Generated voter ID:', voterId);

      // Load candidates
      loadCandidates();

      // Form submission
      document.getElementById('vote-form')?.addEventListener('submit', (e) => {
        e.preventDefault();
        submitVote();
      });

      // Clear votes button
      document.getElementById('clear-votes-btn')?.addEventListener('click', clearAllVotes);

      // Retry button
      document.getElementById('retry-btn')?.addEventListener('click', loadCandidates);

      // Vote again button (in success state)
      document.getElementById('vote-again-btn')?.addEventListener('click', () => {
        // Generate new voter ID for new vote
        voterId = generateVoterId();
        document.getElementById('success')?.classList.add('hidden');
        document.getElementById('voting-form')?.classList.remove('hidden');
        clearAllVotes();
      });
    });
  </script>
</Layout>

<style>
  /* Custom styles for better responsive behavior */
  @media (max-width: 768px) {
    main {
      width: 100%;
      max-width: 100%;
      padding: 1rem;
    }
    
    .title-gradient {
      font-size: 3rem;
    }
  }
  
  /* Smooth transitions */
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  /* Enhanced hover effects */
  button:hover, a:hover {
    transform: translateY(-1px);
    transition: transform 0.2s ease;
  }
  
  /* Star button enhancements */
  .star-button {
    transition: all 0.2s ease;
  }
  
  .star-button:hover {
    transform: scale(1.1);
  }
  
  /* Loading animation in submit button */
  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>