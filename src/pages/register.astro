---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Register - CCSF CS Club">
  <main class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4">
    <div class="max-w-md mx-auto">
      <div class="bg-white rounded-lg shadow-xl p-8">
        <div class="text-center mb-8">
          <h1 class="text-3xl font-bold text-gray-900 mb-2">Join the CS Club</h1>
          <p class="text-gray-600">Register to become part of our community</p>
        </div>

        <!-- Success Message -->
        <div id="success-message" class="hidden mb-6 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg">
          <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
            </svg>
            <span>Registration successful! Welcome to the CS Club!</span>
          </div>
        </div>

        <!-- Error Message -->
        <div id="error-message" class="hidden mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
          <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
            </svg>
            <span id="error-text">An error occurred. Please try again.</span>
          </div>
        </div>

        <!-- Registration Form -->
        <form id="registration-form" class="space-y-6">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700 mb-2">
              Full Name *
            </label>
            <input
              type="text"
              id="name"
              name="name"
              required
              minlength="2"
              maxlength="255"
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"
              placeholder="Enter your full name"
            />
            <div id="name-error" class="hidden text-red-600 text-sm mt-1"></div>
          </div>

          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
              Email Address *
            </label>
            <input
              type="email"
              id="email"
              name="email"
              required
              maxlength="255"
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"
              placeholder="Enter your email address"
            />
            <div id="email-error" class="hidden text-red-600 text-sm mt-1"></div>
          </div>

          <button
            type="submit"
            id="submit-btn"
            class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium"
          >
            Register
          </button>

          <div id="loading-indicator" class="hidden text-center">
            <div class="inline-flex items-center">
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Registering...
            </div>
          </div>
        </form>

        <div class="mt-8 text-center">
          <p class="text-sm text-gray-500">
            Already registered? <a href="/" class="text-indigo-600 hover:text-indigo-800">Return to homepage</a>
          </p>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('registration-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const loadingIndicator = document.getElementById('loading-indicator') as HTMLElement;
    const successMessage = document.getElementById('success-message') as HTMLElement;
    const errorMessage = document.getElementById('error-message') as HTMLElement;
    const errorText = document.getElementById('error-text') as HTMLElement;

    // Form validation
    const nameInput = document.getElementById('name') as HTMLInputElement;
    const emailInput = document.getElementById('email') as HTMLInputElement;
    const nameError = document.getElementById('name-error') as HTMLElement;
    const emailError = document.getElementById('email-error') as HTMLElement;

    function showError(message: string) {
      errorText.textContent = message;
      errorMessage.classList.remove('hidden');
      successMessage.classList.add('hidden');
    }

    function showSuccess() {
      successMessage.classList.remove('hidden');
      errorMessage.classList.add('hidden');
    }

    function hideMessages() {
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');
    }

    function validateName(): boolean {
      const name = nameInput.value.trim();
      if (name.length < 2) {
        nameError.textContent = 'Name must be at least 2 characters long';
        nameError.classList.remove('hidden');
        return false;
      }
      if (name.length > 255) {
        nameError.textContent = 'Name must be less than 255 characters';
        nameError.classList.remove('hidden');
        return false;
      }
      nameError.classList.add('hidden');
      return true;
    }

    function validateEmail(): boolean {
      const email = emailInput.value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      
      if (!emailRegex.test(email)) {
        emailError.textContent = 'Please enter a valid email address';
        emailError.classList.remove('hidden');
        return false;
      }
      if (email.length > 255) {
        emailError.textContent = 'Email must be less than 255 characters';
        emailError.classList.remove('hidden');
        return false;
      }
      emailError.classList.add('hidden');
      return true;
    }

    // Real-time validation
    nameInput.addEventListener('blur', validateName);
    emailInput.addEventListener('blur', validateEmail);

    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Validate form
      const isNameValid = validateName();
      const isEmailValid = validateEmail();
      
      if (!isNameValid || !isEmailValid) {
        return;
      }

      // Show loading state
      submitBtn.disabled = true;
      submitBtn.classList.add('hidden');
      loadingIndicator.classList.remove('hidden');
      hideMessages();

      try {
        const formData = new FormData(form);
        
        const response = await fetch('/api/register', {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json'
          }
        });

        const result = await response.json();

        if (response.ok) {
          showSuccess();
          form.reset();
        } else {
          showError(result.error || 'Registration failed. Please try again.');
        }

      } catch (error) {
        console.error('Registration error:', error);
        showError('Network error. Please check your connection and try again.');
      } finally {
        // Reset loading state
        submitBtn.disabled = false;
        submitBtn.classList.remove('hidden');
        loadingIndicator.classList.add('hidden');
      }
    });
  });
</script>